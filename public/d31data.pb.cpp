// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: d31data.proto

#include "d31data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class D31ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<D31Item>
      _instance;
} _D31Item_default_instance_;
namespace protobuf_d31data_2eproto {
void InitDefaultsD31ItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_D31Item_default_instance_;
    new (ptr) ::D31Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::D31Item::InitAsDefaultInstance();
}

void InitDefaultsD31Item() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsD31ItemImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, nstockcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ntradetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzbbidamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzbbidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, anzbbidordernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzbaskamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzbaskvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, anzbaskordernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzdbidamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzdbidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, anzdbidordernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzdaskamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afzdaskvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, anzdaskordernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftenbidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftenaskvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftenbidamnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftenaskamnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftotalbidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftotalaskvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftotalbidamnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, ftotalaskamnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, fwtavgbidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, fwtavgaskprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, flastclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, fcurprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, favgtotalbidamnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, favgtotalaskamnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, fbidamount20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, faskamount20_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, fbidamount50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, faskamount50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, fbidamount100_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, faskamount100_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::D31Item, afreserve_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::D31Item)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_D31Item_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "d31data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rd31data.proto\"\251\006\n\007D31Item\022\022\n\nnStockCod"
      "e\030\001 \001(\r\022\022\n\nnTradeTime\030\002 \001(\r\022\025\n\rafZbBidAm"
      "ount\030\003 \003(\002\022\025\n\rafZbBidVolume\030\004 \003(\002\022\027\n\017anZ"
      "bBidOrderNum\030\005 \003(\r\022\025\n\rafZbAskAmount\030\006 \003("
      "\002\022\025\n\rafZbAskVolume\030\007 \003(\002\022\027\n\017anZbAskOrder"
      "Num\030\010 \003(\r\022\025\n\rafZdBidAmount\030\t \003(\002\022\025\n\rafZd"
      "BidVolume\030\n \003(\002\022\027\n\017anZdBidOrderNum\030\013 \003(\r"
      "\022\025\n\rafZdAskAmount\030\014 \003(\002\022\025\n\rafZdAskVolume"
      "\030\r \003(\002\022\027\n\017anZdAskOrderNum\030\016 \003(\r\022\025\n\rfTenB"
      "idVolume\030\017 \001(\002\022\025\n\rfTenAskVolume\030\020 \001(\002\022\023\n"
      "\013fTenBidAmnt\030\021 \001(\002\022\023\n\013fTenAskAmnt\030\022 \001(\002\022"
      "\027\n\017fTotalBidVolume\030\023 \001(\002\022\027\n\017fTotalAskVol"
      "ume\030\024 \001(\002\022\025\n\rfTotalBidAmnt\030\025 \001(\002\022\025\n\rfTot"
      "alAskAmnt\030\026 \001(\002\022\026\n\016fWtAvgBidPrice\030\027 \001(\002\022"
      "\026\n\016fWtAvgAskPrice\030\030 \001(\002\022\022\n\nfLastClose\030\031 "
      "\001(\002\022\021\n\tfCurPrice\030\032 \001(\002\022\030\n\020fAvgTotalBidAm"
      "nt\030\033 \001(\002\022\030\n\020fAvgTotalAskAmnt\030\034 \001(\002\022\024\n\014fB"
      "idAmount20\030\035 \001(\002\022\024\n\014fAskAmount20\030\036 \001(\002\022\024"
      "\n\014fBidAmount50\030\037 \001(\002\022\024\n\014fAskAmount50\030  \001"
      "(\002\022\025\n\rfBidAmount100\030! \001(\002\022\025\n\rfAskAmount1"
      "00\030\" \001(\002\022\021\n\tafReserve\030# \003(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 835);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "d31data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_d31data_2eproto

// ===================================================================

void D31Item::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int D31Item::kNStockCodeFieldNumber;
const int D31Item::kNTradeTimeFieldNumber;
const int D31Item::kAfZbBidAmountFieldNumber;
const int D31Item::kAfZbBidVolumeFieldNumber;
const int D31Item::kAnZbBidOrderNumFieldNumber;
const int D31Item::kAfZbAskAmountFieldNumber;
const int D31Item::kAfZbAskVolumeFieldNumber;
const int D31Item::kAnZbAskOrderNumFieldNumber;
const int D31Item::kAfZdBidAmountFieldNumber;
const int D31Item::kAfZdBidVolumeFieldNumber;
const int D31Item::kAnZdBidOrderNumFieldNumber;
const int D31Item::kAfZdAskAmountFieldNumber;
const int D31Item::kAfZdAskVolumeFieldNumber;
const int D31Item::kAnZdAskOrderNumFieldNumber;
const int D31Item::kFTenBidVolumeFieldNumber;
const int D31Item::kFTenAskVolumeFieldNumber;
const int D31Item::kFTenBidAmntFieldNumber;
const int D31Item::kFTenAskAmntFieldNumber;
const int D31Item::kFTotalBidVolumeFieldNumber;
const int D31Item::kFTotalAskVolumeFieldNumber;
const int D31Item::kFTotalBidAmntFieldNumber;
const int D31Item::kFTotalAskAmntFieldNumber;
const int D31Item::kFWtAvgBidPriceFieldNumber;
const int D31Item::kFWtAvgAskPriceFieldNumber;
const int D31Item::kFLastCloseFieldNumber;
const int D31Item::kFCurPriceFieldNumber;
const int D31Item::kFAvgTotalBidAmntFieldNumber;
const int D31Item::kFAvgTotalAskAmntFieldNumber;
const int D31Item::kFBidAmount20FieldNumber;
const int D31Item::kFAskAmount20FieldNumber;
const int D31Item::kFBidAmount50FieldNumber;
const int D31Item::kFAskAmount50FieldNumber;
const int D31Item::kFBidAmount100FieldNumber;
const int D31Item::kFAskAmount100FieldNumber;
const int D31Item::kAfReserveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

D31Item::D31Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_d31data_2eproto::InitDefaultsD31Item();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:D31Item)
}
D31Item::D31Item(const D31Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      afzbbidamount_(from.afzbbidamount_),
      afzbbidvolume_(from.afzbbidvolume_),
      anzbbidordernum_(from.anzbbidordernum_),
      afzbaskamount_(from.afzbaskamount_),
      afzbaskvolume_(from.afzbaskvolume_),
      anzbaskordernum_(from.anzbaskordernum_),
      afzdbidamount_(from.afzdbidamount_),
      afzdbidvolume_(from.afzdbidvolume_),
      anzdbidordernum_(from.anzdbidordernum_),
      afzdaskamount_(from.afzdaskamount_),
      afzdaskvolume_(from.afzdaskvolume_),
      anzdaskordernum_(from.anzdaskordernum_),
      afreserve_(from.afreserve_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nstockcode_, &from.nstockcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&faskamount100_) -
    reinterpret_cast<char*>(&nstockcode_)) + sizeof(faskamount100_));
  // @@protoc_insertion_point(copy_constructor:D31Item)
}

void D31Item::SharedCtor() {
  ::memset(&nstockcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&faskamount100_) -
      reinterpret_cast<char*>(&nstockcode_)) + sizeof(faskamount100_));
  _cached_size_ = 0;
}

D31Item::~D31Item() {
  // @@protoc_insertion_point(destructor:D31Item)
  SharedDtor();
}

void D31Item::SharedDtor() {
}

void D31Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* D31Item::descriptor() {
  ::protobuf_d31data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_d31data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const D31Item& D31Item::default_instance() {
  ::protobuf_d31data_2eproto::InitDefaultsD31Item();
  return *internal_default_instance();
}

D31Item* D31Item::New(::google::protobuf::Arena* arena) const {
  D31Item* n = new D31Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void D31Item::Clear() {
// @@protoc_insertion_point(message_clear_start:D31Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  afzbbidamount_.Clear();
  afzbbidvolume_.Clear();
  anzbbidordernum_.Clear();
  afzbaskamount_.Clear();
  afzbaskvolume_.Clear();
  anzbaskordernum_.Clear();
  afzdbidamount_.Clear();
  afzdbidvolume_.Clear();
  anzdbidordernum_.Clear();
  afzdaskamount_.Clear();
  afzdaskvolume_.Clear();
  anzdaskordernum_.Clear();
  afreserve_.Clear();
  ::memset(&nstockcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&faskamount100_) -
      reinterpret_cast<char*>(&nstockcode_)) + sizeof(faskamount100_));
  _internal_metadata_.Clear();
}

bool D31Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:D31Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 nStockCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstockcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nTradeTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntradetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZbBidAmount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzbbidamount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_afzbbidamount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZbBidVolume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzbbidvolume())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_afzbbidvolume())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 anZbBidOrderNum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_anzbbidordernum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_anzbbidordernum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZbAskAmount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzbaskamount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_afzbaskamount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZbAskVolume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzbaskvolume())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_afzbaskvolume())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 anZbAskOrderNum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_anzbaskordernum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_anzbaskordernum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZdBidAmount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzdbidamount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_afzdbidamount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZdBidVolume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzdbidvolume())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_afzdbidvolume())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 anZdBidOrderNum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_anzdbidordernum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_anzdbidordernum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZdAskAmount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzdaskamount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_afzdaskamount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afZdAskVolume = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afzdaskvolume())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_afzdaskvolume())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 anZdAskOrderNum = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_anzdaskordernum())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_anzdaskordernum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTenBidVolume = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftenbidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTenAskVolume = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftenaskvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTenBidAmnt = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftenbidamnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTenAskAmnt = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftenaskamnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTotalBidVolume = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftotalbidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTotalAskVolume = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftotalaskvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTotalBidAmnt = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftotalbidamnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTotalAskAmnt = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftotalaskamnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fWtAvgBidPrice = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwtavgbidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fWtAvgAskPrice = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwtavgaskprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fLastClose = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flastclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fCurPrice = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcurprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fAvgTotalBidAmnt = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &favgtotalbidamnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fAvgTotalAskAmnt = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &favgtotalaskamnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fBidAmount20 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fbidamount20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fAskAmount20 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faskamount20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fBidAmount50 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fbidamount50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fAskAmount50 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faskamount50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fBidAmount100 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fbidamount100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fAskAmount100 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faskamount100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float afReserve = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afreserve())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 282u, input, this->mutable_afreserve())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:D31Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:D31Item)
  return false;
#undef DO_
}

void D31Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:D31Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nStockCode = 1;
  if (this->nstockcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nstockcode(), output);
  }

  // uint32 nTradeTime = 2;
  if (this->ntradetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ntradetime(), output);
  }

  // repeated float afZbBidAmount = 3;
  if (this->afzbbidamount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzbbidamount_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzbbidamount().data(), this->afzbbidamount_size(), output);
  }

  // repeated float afZbBidVolume = 4;
  if (this->afzbbidvolume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzbbidvolume_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzbbidvolume().data(), this->afzbbidvolume_size(), output);
  }

  // repeated uint32 anZbBidOrderNum = 5;
  if (this->anzbbidordernum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _anzbbidordernum_cached_byte_size_));
  }
  for (int i = 0, n = this->anzbbidordernum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->anzbbidordernum(i), output);
  }

  // repeated float afZbAskAmount = 6;
  if (this->afzbaskamount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzbaskamount_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzbaskamount().data(), this->afzbaskamount_size(), output);
  }

  // repeated float afZbAskVolume = 7;
  if (this->afzbaskvolume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzbaskvolume_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzbaskvolume().data(), this->afzbaskvolume_size(), output);
  }

  // repeated uint32 anZbAskOrderNum = 8;
  if (this->anzbaskordernum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _anzbaskordernum_cached_byte_size_));
  }
  for (int i = 0, n = this->anzbaskordernum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->anzbaskordernum(i), output);
  }

  // repeated float afZdBidAmount = 9;
  if (this->afzdbidamount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzdbidamount_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzdbidamount().data(), this->afzdbidamount_size(), output);
  }

  // repeated float afZdBidVolume = 10;
  if (this->afzdbidvolume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzdbidvolume_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzdbidvolume().data(), this->afzdbidvolume_size(), output);
  }

  // repeated uint32 anZdBidOrderNum = 11;
  if (this->anzdbidordernum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _anzdbidordernum_cached_byte_size_));
  }
  for (int i = 0, n = this->anzdbidordernum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->anzdbidordernum(i), output);
  }

  // repeated float afZdAskAmount = 12;
  if (this->afzdaskamount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzdaskamount_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzdaskamount().data(), this->afzdaskamount_size(), output);
  }

  // repeated float afZdAskVolume = 13;
  if (this->afzdaskvolume_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afzdaskvolume_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afzdaskvolume().data(), this->afzdaskvolume_size(), output);
  }

  // repeated uint32 anZdAskOrderNum = 14;
  if (this->anzdaskordernum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _anzdaskordernum_cached_byte_size_));
  }
  for (int i = 0, n = this->anzdaskordernum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->anzdaskordernum(i), output);
  }

  // float fTenBidVolume = 15;
  if (this->ftenbidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ftenbidvolume(), output);
  }

  // float fTenAskVolume = 16;
  if (this->ftenaskvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->ftenaskvolume(), output);
  }

  // float fTenBidAmnt = 17;
  if (this->ftenbidamnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->ftenbidamnt(), output);
  }

  // float fTenAskAmnt = 18;
  if (this->ftenaskamnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->ftenaskamnt(), output);
  }

  // float fTotalBidVolume = 19;
  if (this->ftotalbidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->ftotalbidvolume(), output);
  }

  // float fTotalAskVolume = 20;
  if (this->ftotalaskvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->ftotalaskvolume(), output);
  }

  // float fTotalBidAmnt = 21;
  if (this->ftotalbidamnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->ftotalbidamnt(), output);
  }

  // float fTotalAskAmnt = 22;
  if (this->ftotalaskamnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->ftotalaskamnt(), output);
  }

  // float fWtAvgBidPrice = 23;
  if (this->fwtavgbidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->fwtavgbidprice(), output);
  }

  // float fWtAvgAskPrice = 24;
  if (this->fwtavgaskprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->fwtavgaskprice(), output);
  }

  // float fLastClose = 25;
  if (this->flastclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->flastclose(), output);
  }

  // float fCurPrice = 26;
  if (this->fcurprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->fcurprice(), output);
  }

  // float fAvgTotalBidAmnt = 27;
  if (this->favgtotalbidamnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->favgtotalbidamnt(), output);
  }

  // float fAvgTotalAskAmnt = 28;
  if (this->favgtotalaskamnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->favgtotalaskamnt(), output);
  }

  // float fBidAmount20 = 29;
  if (this->fbidamount20() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->fbidamount20(), output);
  }

  // float fAskAmount20 = 30;
  if (this->faskamount20() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->faskamount20(), output);
  }

  // float fBidAmount50 = 31;
  if (this->fbidamount50() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->fbidamount50(), output);
  }

  // float fAskAmount50 = 32;
  if (this->faskamount50() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->faskamount50(), output);
  }

  // float fBidAmount100 = 33;
  if (this->fbidamount100() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->fbidamount100(), output);
  }

  // float fAskAmount100 = 34;
  if (this->faskamount100() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->faskamount100(), output);
  }

  // repeated float afReserve = 35;
  if (this->afreserve_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(35, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _afreserve_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->afreserve().data(), this->afreserve_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:D31Item)
}

::google::protobuf::uint8* D31Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:D31Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nStockCode = 1;
  if (this->nstockcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nstockcode(), target);
  }

  // uint32 nTradeTime = 2;
  if (this->ntradetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ntradetime(), target);
  }

  // repeated float afZbBidAmount = 3;
  if (this->afzbbidamount_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzbbidamount_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzbbidamount_, target);
  }

  // repeated float afZbBidVolume = 4;
  if (this->afzbbidvolume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzbbidvolume_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzbbidvolume_, target);
  }

  // repeated uint32 anZbBidOrderNum = 5;
  if (this->anzbbidordernum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _anzbbidordernum_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->anzbbidordernum_, target);
  }

  // repeated float afZbAskAmount = 6;
  if (this->afzbaskamount_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzbaskamount_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzbaskamount_, target);
  }

  // repeated float afZbAskVolume = 7;
  if (this->afzbaskvolume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzbaskvolume_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzbaskvolume_, target);
  }

  // repeated uint32 anZbAskOrderNum = 8;
  if (this->anzbaskordernum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _anzbaskordernum_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->anzbaskordernum_, target);
  }

  // repeated float afZdBidAmount = 9;
  if (this->afzdbidamount_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzdbidamount_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzdbidamount_, target);
  }

  // repeated float afZdBidVolume = 10;
  if (this->afzdbidvolume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzdbidvolume_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzdbidvolume_, target);
  }

  // repeated uint32 anZdBidOrderNum = 11;
  if (this->anzdbidordernum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _anzdbidordernum_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->anzdbidordernum_, target);
  }

  // repeated float afZdAskAmount = 12;
  if (this->afzdaskamount_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzdaskamount_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzdaskamount_, target);
  }

  // repeated float afZdAskVolume = 13;
  if (this->afzdaskvolume_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afzdaskvolume_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afzdaskvolume_, target);
  }

  // repeated uint32 anZdAskOrderNum = 14;
  if (this->anzdaskordernum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _anzdaskordernum_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->anzdaskordernum_, target);
  }

  // float fTenBidVolume = 15;
  if (this->ftenbidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ftenbidvolume(), target);
  }

  // float fTenAskVolume = 16;
  if (this->ftenaskvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->ftenaskvolume(), target);
  }

  // float fTenBidAmnt = 17;
  if (this->ftenbidamnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->ftenbidamnt(), target);
  }

  // float fTenAskAmnt = 18;
  if (this->ftenaskamnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->ftenaskamnt(), target);
  }

  // float fTotalBidVolume = 19;
  if (this->ftotalbidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->ftotalbidvolume(), target);
  }

  // float fTotalAskVolume = 20;
  if (this->ftotalaskvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->ftotalaskvolume(), target);
  }

  // float fTotalBidAmnt = 21;
  if (this->ftotalbidamnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->ftotalbidamnt(), target);
  }

  // float fTotalAskAmnt = 22;
  if (this->ftotalaskamnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->ftotalaskamnt(), target);
  }

  // float fWtAvgBidPrice = 23;
  if (this->fwtavgbidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->fwtavgbidprice(), target);
  }

  // float fWtAvgAskPrice = 24;
  if (this->fwtavgaskprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->fwtavgaskprice(), target);
  }

  // float fLastClose = 25;
  if (this->flastclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->flastclose(), target);
  }

  // float fCurPrice = 26;
  if (this->fcurprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->fcurprice(), target);
  }

  // float fAvgTotalBidAmnt = 27;
  if (this->favgtotalbidamnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->favgtotalbidamnt(), target);
  }

  // float fAvgTotalAskAmnt = 28;
  if (this->favgtotalaskamnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->favgtotalaskamnt(), target);
  }

  // float fBidAmount20 = 29;
  if (this->fbidamount20() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->fbidamount20(), target);
  }

  // float fAskAmount20 = 30;
  if (this->faskamount20() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->faskamount20(), target);
  }

  // float fBidAmount50 = 31;
  if (this->fbidamount50() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->fbidamount50(), target);
  }

  // float fAskAmount50 = 32;
  if (this->faskamount50() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->faskamount50(), target);
  }

  // float fBidAmount100 = 33;
  if (this->fbidamount100() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->fbidamount100(), target);
  }

  // float fAskAmount100 = 34;
  if (this->faskamount100() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->faskamount100(), target);
  }

  // repeated float afReserve = 35;
  if (this->afreserve_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      35,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _afreserve_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->afreserve_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:D31Item)
  return target;
}

size_t D31Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:D31Item)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float afZbBidAmount = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->afzbbidamount_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzbbidamount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZbBidVolume = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->afzbbidvolume_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzbbidvolume_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 anZbBidOrderNum = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->anzbbidordernum_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _anzbbidordernum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZbAskAmount = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->afzbaskamount_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzbaskamount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZbAskVolume = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->afzbaskvolume_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzbaskvolume_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 anZbAskOrderNum = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->anzbaskordernum_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _anzbaskordernum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZdBidAmount = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->afzdbidamount_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzdbidamount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZdBidVolume = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->afzdbidvolume_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzdbidvolume_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 anZdBidOrderNum = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->anzdbidordernum_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _anzdbidordernum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZdAskAmount = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->afzdaskamount_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzdaskamount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afZdAskVolume = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->afzdaskvolume_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afzdaskvolume_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 anZdAskOrderNum = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->anzdaskordernum_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _anzdaskordernum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float afReserve = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->afreserve_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _afreserve_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 nStockCode = 1;
  if (this->nstockcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstockcode());
  }

  // uint32 nTradeTime = 2;
  if (this->ntradetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntradetime());
  }

  // float fTenBidVolume = 15;
  if (this->ftenbidvolume() != 0) {
    total_size += 1 + 4;
  }

  // float fTenAskVolume = 16;
  if (this->ftenaskvolume() != 0) {
    total_size += 2 + 4;
  }

  // float fTenBidAmnt = 17;
  if (this->ftenbidamnt() != 0) {
    total_size += 2 + 4;
  }

  // float fTenAskAmnt = 18;
  if (this->ftenaskamnt() != 0) {
    total_size += 2 + 4;
  }

  // float fTotalBidVolume = 19;
  if (this->ftotalbidvolume() != 0) {
    total_size += 2 + 4;
  }

  // float fTotalAskVolume = 20;
  if (this->ftotalaskvolume() != 0) {
    total_size += 2 + 4;
  }

  // float fTotalBidAmnt = 21;
  if (this->ftotalbidamnt() != 0) {
    total_size += 2 + 4;
  }

  // float fTotalAskAmnt = 22;
  if (this->ftotalaskamnt() != 0) {
    total_size += 2 + 4;
  }

  // float fWtAvgBidPrice = 23;
  if (this->fwtavgbidprice() != 0) {
    total_size += 2 + 4;
  }

  // float fWtAvgAskPrice = 24;
  if (this->fwtavgaskprice() != 0) {
    total_size += 2 + 4;
  }

  // float fLastClose = 25;
  if (this->flastclose() != 0) {
    total_size += 2 + 4;
  }

  // float fCurPrice = 26;
  if (this->fcurprice() != 0) {
    total_size += 2 + 4;
  }

  // float fAvgTotalBidAmnt = 27;
  if (this->favgtotalbidamnt() != 0) {
    total_size += 2 + 4;
  }

  // float fAvgTotalAskAmnt = 28;
  if (this->favgtotalaskamnt() != 0) {
    total_size += 2 + 4;
  }

  // float fBidAmount20 = 29;
  if (this->fbidamount20() != 0) {
    total_size += 2 + 4;
  }

  // float fAskAmount20 = 30;
  if (this->faskamount20() != 0) {
    total_size += 2 + 4;
  }

  // float fBidAmount50 = 31;
  if (this->fbidamount50() != 0) {
    total_size += 2 + 4;
  }

  // float fAskAmount50 = 32;
  if (this->faskamount50() != 0) {
    total_size += 2 + 4;
  }

  // float fBidAmount100 = 33;
  if (this->fbidamount100() != 0) {
    total_size += 2 + 4;
  }

  // float fAskAmount100 = 34;
  if (this->faskamount100() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void D31Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:D31Item)
  GOOGLE_DCHECK_NE(&from, this);
  const D31Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const D31Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:D31Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:D31Item)
    MergeFrom(*source);
  }
}

void D31Item::MergeFrom(const D31Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:D31Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  afzbbidamount_.MergeFrom(from.afzbbidamount_);
  afzbbidvolume_.MergeFrom(from.afzbbidvolume_);
  anzbbidordernum_.MergeFrom(from.anzbbidordernum_);
  afzbaskamount_.MergeFrom(from.afzbaskamount_);
  afzbaskvolume_.MergeFrom(from.afzbaskvolume_);
  anzbaskordernum_.MergeFrom(from.anzbaskordernum_);
  afzdbidamount_.MergeFrom(from.afzdbidamount_);
  afzdbidvolume_.MergeFrom(from.afzdbidvolume_);
  anzdbidordernum_.MergeFrom(from.anzdbidordernum_);
  afzdaskamount_.MergeFrom(from.afzdaskamount_);
  afzdaskvolume_.MergeFrom(from.afzdaskvolume_);
  anzdaskordernum_.MergeFrom(from.anzdaskordernum_);
  afreserve_.MergeFrom(from.afreserve_);
  if (from.nstockcode() != 0) {
    set_nstockcode(from.nstockcode());
  }
  if (from.ntradetime() != 0) {
    set_ntradetime(from.ntradetime());
  }
  if (from.ftenbidvolume() != 0) {
    set_ftenbidvolume(from.ftenbidvolume());
  }
  if (from.ftenaskvolume() != 0) {
    set_ftenaskvolume(from.ftenaskvolume());
  }
  if (from.ftenbidamnt() != 0) {
    set_ftenbidamnt(from.ftenbidamnt());
  }
  if (from.ftenaskamnt() != 0) {
    set_ftenaskamnt(from.ftenaskamnt());
  }
  if (from.ftotalbidvolume() != 0) {
    set_ftotalbidvolume(from.ftotalbidvolume());
  }
  if (from.ftotalaskvolume() != 0) {
    set_ftotalaskvolume(from.ftotalaskvolume());
  }
  if (from.ftotalbidamnt() != 0) {
    set_ftotalbidamnt(from.ftotalbidamnt());
  }
  if (from.ftotalaskamnt() != 0) {
    set_ftotalaskamnt(from.ftotalaskamnt());
  }
  if (from.fwtavgbidprice() != 0) {
    set_fwtavgbidprice(from.fwtavgbidprice());
  }
  if (from.fwtavgaskprice() != 0) {
    set_fwtavgaskprice(from.fwtavgaskprice());
  }
  if (from.flastclose() != 0) {
    set_flastclose(from.flastclose());
  }
  if (from.fcurprice() != 0) {
    set_fcurprice(from.fcurprice());
  }
  if (from.favgtotalbidamnt() != 0) {
    set_favgtotalbidamnt(from.favgtotalbidamnt());
  }
  if (from.favgtotalaskamnt() != 0) {
    set_favgtotalaskamnt(from.favgtotalaskamnt());
  }
  if (from.fbidamount20() != 0) {
    set_fbidamount20(from.fbidamount20());
  }
  if (from.faskamount20() != 0) {
    set_faskamount20(from.faskamount20());
  }
  if (from.fbidamount50() != 0) {
    set_fbidamount50(from.fbidamount50());
  }
  if (from.faskamount50() != 0) {
    set_faskamount50(from.faskamount50());
  }
  if (from.fbidamount100() != 0) {
    set_fbidamount100(from.fbidamount100());
  }
  if (from.faskamount100() != 0) {
    set_faskamount100(from.faskamount100());
  }
}

void D31Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:D31Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void D31Item::CopyFrom(const D31Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:D31Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D31Item::IsInitialized() const {
  return true;
}

void D31Item::Swap(D31Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void D31Item::InternalSwap(D31Item* other) {
  using std::swap;
  afzbbidamount_.InternalSwap(&other->afzbbidamount_);
  afzbbidvolume_.InternalSwap(&other->afzbbidvolume_);
  anzbbidordernum_.InternalSwap(&other->anzbbidordernum_);
  afzbaskamount_.InternalSwap(&other->afzbaskamount_);
  afzbaskvolume_.InternalSwap(&other->afzbaskvolume_);
  anzbaskordernum_.InternalSwap(&other->anzbaskordernum_);
  afzdbidamount_.InternalSwap(&other->afzdbidamount_);
  afzdbidvolume_.InternalSwap(&other->afzdbidvolume_);
  anzdbidordernum_.InternalSwap(&other->anzdbidordernum_);
  afzdaskamount_.InternalSwap(&other->afzdaskamount_);
  afzdaskvolume_.InternalSwap(&other->afzdaskvolume_);
  anzdaskordernum_.InternalSwap(&other->anzdaskordernum_);
  afreserve_.InternalSwap(&other->afreserve_);
  swap(nstockcode_, other->nstockcode_);
  swap(ntradetime_, other->ntradetime_);
  swap(ftenbidvolume_, other->ftenbidvolume_);
  swap(ftenaskvolume_, other->ftenaskvolume_);
  swap(ftenbidamnt_, other->ftenbidamnt_);
  swap(ftenaskamnt_, other->ftenaskamnt_);
  swap(ftotalbidvolume_, other->ftotalbidvolume_);
  swap(ftotalaskvolume_, other->ftotalaskvolume_);
  swap(ftotalbidamnt_, other->ftotalbidamnt_);
  swap(ftotalaskamnt_, other->ftotalaskamnt_);
  swap(fwtavgbidprice_, other->fwtavgbidprice_);
  swap(fwtavgaskprice_, other->fwtavgaskprice_);
  swap(flastclose_, other->flastclose_);
  swap(fcurprice_, other->fcurprice_);
  swap(favgtotalbidamnt_, other->favgtotalbidamnt_);
  swap(favgtotalaskamnt_, other->favgtotalaskamnt_);
  swap(fbidamount20_, other->fbidamount20_);
  swap(faskamount20_, other->faskamount20_);
  swap(fbidamount50_, other->fbidamount50_);
  swap(faskamount50_, other->faskamount50_);
  swap(fbidamount100_, other->fbidamount100_);
  swap(faskamount100_, other->faskamount100_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata D31Item::GetMetadata() const {
  protobuf_d31data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_d31data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
