
##找到pid对应的用户名
belong_user_mypid()
{
	mypid=$1

	pscmd="ps -ef | awk '\$2==$mypid{print \$1}'"
	res_str=`eval $pscmd`

	echo "${res_str:-0}"
}
##找到pid对应的命令行名
belong_cmd_mypid()
{
	mypid=$1

	pscmd="ps -ef | awk '\$2==$mypid'"
	pscmdstr=`eval $pscmd`

	res_str=`echo $pscmdstr | awk '{print $8}'`
	res_str=${res_str:-0}

	#如果是脚本，则取脚本名称了
	if [ $res_str = "/bin/bash" -o \
		$res_str = "/bin/sh" -o \
		$res_str = "/bin/ksh" ];then

		res_str=`echo $pscmdstr | awk '{print $9}'`
	fi

	echo "${res_str:-0}"
}

##找到pid对应的父进程ID
belong_ppid_mypid()
{
	mypid=$1

	pscmd="ps -ef | awk '\$2==$mypid{print \$3}'"
	res_str=`eval $pscmd`

	echo "${res_str:-0}"
}

##找到pid对应的启动时间
belong_stime_mypid()
{
	mypid=$1

	pscmd="ps -ef | awk '\$2==$mypid{print \$5}'"
	res_str=`eval $pscmd`

	echo "${res_str:-0}"
}

###定义确认pid是特定用户的pid函数
comfirm_mypid()
{
	myname=$1
	mypid=$2
	
	who_str=`belong_user_mypid $mypid`
	
	myflag="0"
	if [ "$myname" = "$who_str" -o "$myname" = "root" ];then
		myflag="1"
	fi

	echo "$myflag"
}
###定义确认mqid是特定用户的mqid函数
comfirm_mymqid()
{
	myname=$1
	mymqid=$2
	
	myflag="0"
	
	ipcscmd="ipcs -q | awk '\$2==$mymqid{print \$3}'"
	
	who_str=`eval $ipcscmd`
	
	if [ "$myname" = "$who_str" -o "$myname" = "root" ];then
		myflag="1"
	fi

	echo "$myflag"
}

###定义确认semid是特定用户的semid函数
comfirm_mysemid()
{
	myname=$1
	mysemid=$2
	
	myflag="0"
	ipcscmd="ipcs -s | awk '\$2==$mysemid{print \$3}'"
	
	who_str=`eval $ipcscmd`
	
	if [ "$myname" = "$who_str" -o "$myname" = "root" ];then
		myflag="1"
	fi

	echo "$myflag"
}

##清除mq队列
remove_mymq_all()
{

	my_name=`whoami`
	my_name=${my_name:-$USER}
	
	ipcs -q | grep "0x" | awk '{print $2}' | while read tmp
	do
		my_flag=`comfirm_mymqid $my_name $tmp`
	
		if [ $my_flag -eq 0 ];then
			continue;
		fi

		ipcrm -q $tmp 1>/dev/null 2>&1
		if [ $? -eq 0 ]; then
			echo "ipcrm -q $tmp sucess"
		fi
	done
}

##清除mq队列
remove_mysem_all()
{

	my_name=`whoami`
	my_name=${my_name:-$USER}

	ipcs -s | grep "0x" | awk '{print $2}' | while read tmp
	do
	
		my_flag=`comfirm_mysemid $my_name $tmp`
		
		if [ $my_flag -eq 0 ];then
			continue;
		fi
	
		ipcrm -s $tmp 1>/dev/null 2>&1
		if [ $? -eq 0 ]; then
			echo "ipcrm -s $tmp sucess"
		fi
	done
}
##检查本用户的pid进程是否存在
check_mypid_exist()
{
	pids=$@
	res_str="0"
	belong_cmd=""
	my_name=`whoami`
	my_name=${my_name:-$USER}
	
	for i in $pids
	do
		my_flag=`comfirm_mypid $my_name $i`
		
		if [ $my_flag -eq 1 ];then
			res_str=$i
			belong_cmd=`belong_cmd_mypid $i`
			break;
		fi
	done
	
	echo $res_str
}
