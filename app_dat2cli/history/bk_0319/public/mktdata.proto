syntax = "proto3";

message LoginRequest {
  string name = 1;
  string password = 2;
}

enum ErrCode {
	SUCCESS=0;
	OTHER=1;
}

message Reply {
	ErrCode err = 1;
	string desc = 2;
}

enum SubscribeType {
	proto_DEFAULT = 0;			//无意义，仅因protobuf语法要求
	proto_sub_LV1 = 11;
	proto_sub_LV2 = 12;
	proto_sub_DEAL = 13;
	proto_sub_ORDERQUEUE = 14;
	proto_sub_SZ_ORDER = 15;
	proto_sub_INDEX_SH = 16;
	proto_sub_INDEX_SZ = 17;
}

enum BizCode {
	BizCode_DEFAULT = 0;
	LOGIN_REQ = 1;
	LOGIN_REP = 2;
	SUBSCRIBLE = 3;
	CODES_SUB = 4;	//订阅个别股票
	CODES_BROADCAST = 5;//登录成功后推送所有证券代码
	MKT_DATA_LV1 = 11;
	MKT_DATA_LV2 = 12;
	MKT_DATA_DEAL = 13;
	MKT_DATA_ORDERQUEUE = 14;
	SZ_ORDER = 15;
	INDEX_SH = 16;
	INDEX_SZ = 17;
	HEART_BEAT = 254;
	FOR_TEST = 255;
}

message SubscribeRequest {
	repeated SubscribeType sub = 1;
	bool replay = 2;//是否请求行情回放
	repeated string codes = 3;//形如"000001"。若为空，则按照sub字段订阅。若不为空，则还会订阅此字段指定的股票
	uint32 date = 4;//yyyymmdd格式
	uint32 timebegin = 5;//hhmmss格式
	uint32 timeend = 6;//hhmmss格式
}

message PbCode {
	string szWindCode = 1;
	string szMarket = 2;
	string szCode = 3;
	string szENName = 4;
	string szCNName = 5;
	int32 nType = 6;
	string szWindType = 7;
	int32 nRecord = 8;
	int32 nLotSize = 9;
}

message MktData {
	uint32 szCode = 1;
	uint32 nTime = 2;
	int32 nStatus = 3;
	uint32 nPreClose = 4;
	uint32 nOpen = 5;
	uint32 nHigh = 6;
	uint32 nLow = 7;
	uint32 nMatch = 8;
	repeated uint32 nAskPrice =9;
	repeated uint64 nAskVol = 10;
	repeated uint64 nBidPrice = 11;
	repeated uint64 nBidVol = 12;
	uint32 nNumTrades = 13;
	uint64 iVolume = 14;
	uint64 iTurnover = 15;
	uint64 nTotalBidVol = 16;
	uint64 nTotalAskVol = 17;
	uint32 nWeightedAvgBidPrice = 18;
	uint32 nWeightedAvgAskPrice = 19;
	int32 nIOPV = 20;
	int32 nYieldToMaturity = 21;
	uint32 nHighLimited = 22;
	uint32 nLowLimited = 23;
	int32 nSyl1 = 24;
	int32 nSyl2 = 25;
	int32 nSD2 = 26;
}

message Transaction {
	uint32 szCode = 1;		//600001.SH
    uint32 nTime = 2;		//成交时间(HHMMSSmmm)
    uint32 nIndex = 3;		//成交编号
    uint32 nPrice = 4;		//成交价格
    uint32 nVolume = 5;		//成交数量
    uint64 nTurnover = 6;	//成交金额
    uint32 nBSFlag = 7;		//买卖方向(买：'B', 卖：'S', 不明：' ')
    uint32 chOrderKind = 8;		//成交类别
    uint32 chFunctionCode = 9;	//成交代码
    int32 nAskOrder = 10;		//叫卖方委托序号
    int32 nBidOrder = 11;		//叫买方委托序号
}

message Order {
	uint32 szCode = 1;			//600001.SH
	uint32 nTime = 2;			//委托时间(HHMMSSmmm)
	int32 nOrder = 3;			//委托号
	uint32 nPrice = 4;			//委托价格
	uint32 nVolume = 5;			//委托数量
	uint32 chOrderKind = 6;		//委托类别
	uint32 chFunctionCode = 7;	//委托代码('B','S','C')
	int32 nBroker = 8;	//经纪商编码
	int32 chStatus = 9;			//委托状态
	int32 chFlag = 10;			//标志
}

message Order_queue {
	uint32 szCode = 1;			//600001.SH
	uint32 nTime = 2;			//时间(HHMMSSmmm)
	bool nSide = 3;				//买卖方向('B':Bid 'A':Ask)
	uint32 nPrice = 4;			//委托价格
	uint32 nOrders = 5;			//订单数量
	uint32 nABItems = 6;		//明细个数
	repeated int32 nABVolume = 7;//订单明细
}

message PbTest {
	bool nothing = 1;
}

message PbHeartbeat {
	bool nothing = 1;
}

message PbIndexSh {
	uint32 TradeTime = 1;		//成交时间
	uint32 Symbol = 2;			//证券代码
	double TotalAmount = 3;		//成交总额
	double HighPrice = 4;		//最高价
	double LowPrice = 5;		//最低价
	double LastPrice = 6;		//现价
	uint64 TotalVolume = 7;		//成交总量 单位：股。其中债券类指数需要除以10后单位为张。
}

message PbIndexSz {
	uint64 Time = 1;			//数据生成时间 数据生成时间YYYYMMDDHHMMSSsss。
	uint32 Symbol = 2;			//证券代码
	double HighPrice = 3;		//最高价
	double LowPrice = 4;		//最低价
	double LastPrice = 5;		//现价
	double TotalAmount = 6;		//成交金额
	uint64 TotalNo = 7;			//成交笔数
	double TotalVolume = 8;		//成交总量
}

message PbCodesSub {
	bool add_red = 1;	//true增加证券代码,false减少
	repeated uint32 codes = 2;
}

message PbCodesBroadcast {
	repeated uint32 codes = 1;
}
